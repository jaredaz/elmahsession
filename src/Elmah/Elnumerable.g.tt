<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.CodeDom" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.CSharp" #>
#region License, Terms and Author(s)
//
// ELMAH - Error Logging Modules and Handlers for ASP.NET
// Copyright (c) 2004-9 Atif Aziz. All rights reserved.
//
//  Author(s):
//
//      Atif Aziz, http://www.raboof.com
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#endregion

namespace Elmah
{
    using System.Collections.Generic;

    static partial class Elnumerable
    { 
<#      var cscp = new CSharpCodeProvider();
        var types = 
            from method in typeof(StringBuilder).GetMethods(BindingFlags.Public | BindingFlags.Instance)
            where "Append" == method.Name
            select method.GetParameters() into parameters
            where parameters.Length == 1
            select parameters.First().ParameterType into type
            where type.IsValueType || type == typeof(string)
            select cscp.GetTypeOutput(new CodeTypeReference(type));
        foreach (var type in types) { #>
        public static string ToDelimitedString(this IEnumerable<<#= type#>> source, string delimiter)
        {
            return FormatDelimitedString(source, delimiter, (sb, e) => sb.Append(e));
        }

<#      } #>
    }
}
